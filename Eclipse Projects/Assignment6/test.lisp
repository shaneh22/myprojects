(and (< 3 4) T)
(and (<= 4 3) 3)
(cond (T 3) (< 3 4) (+ 3 4))
(cond ((< 4 3) 3) ((<= 5 5) (+ 2 2)) (T 3))
(cond ((> 3 6) T) ((>= 4 5) 5) ((> 5 2) (+ 2 3)))
(eval (quote (>= 4 2)))
(eval 1)
(list 1 2 3 4)
(list (+ 2 3) (+ 3 4))
(quote (+ 4 6))
(quote 4)
(not (and (< 2 3) (>= 5 4)))
(not nil)
(or (>= 4 3) (+ 3 4))
(or nil (+ 4 3))
(or nil (> 3 5))
(cons 5 6)
(cons 2 nil)
(setq A 29)
(setq B (+ A 13)) 
B
((lambda () 42))
((lambda (X) (+ X 42)) 0)
((lambda (X Y) (+ X Y)) 20 22) 
(funcall (lambda (X) (+ X 1)) 1)
(setq isList (lambda () T))
(setq listDerivedSafe (lambda (X Y Z) (or (and (<= 13 X) (>= 30 Y) (>= 30 Z)) (and (<= 6 X) (>= 30 Y) (>= 10 Z)) (and (<= 27 X) (>= 30 Y) (>= 50 Z)) (and (<= 13 X) (>= 15 Y) (>= 50 Z)) (and (<= 13 X) (>= 120 Y) (>= 10 Z)) (and (<= 27 X) (>= 120 Y) (>= 30 Z)) (and (<= 6 X) (>= 15 Y) (>= 30 Z)) ) ))